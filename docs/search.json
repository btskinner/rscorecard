[{"path":[]},{"path":"https://www.btskinner.io/rscorecard/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://www.btskinner.io/rscorecard/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://www.btskinner.io/rscorecard/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://www.btskinner.io/rscorecard/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://www.btskinner.io/rscorecard/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team btskinner@coe.ufl.edu. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://www.btskinner.io/rscorecard/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":[]},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"sc_init","dir":"Articles","previous_headings":"Bookend commands","what":"sc_init()","title":"Commands","text":"Use sc_init() start command chain. real option whether want use standard variable names (found IPEDS) new developer-friendly variable names developed Scorecard API. Unless good reason , recommend using default standard names. want use developer-friendly names, set dfvars = TRUE. Whichever choose, ’re stuck option length piped command chain; switching one type another.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"sc_get","dir":"Articles","previous_headings":"Bookend commands","what":"sc_get()","title":"Commands","text":"Use sc_get() last command chain. haven’t used sc_key store data.gov API key system environment, must supply key argument.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"subsetting-commands","dir":"Articles","previous_headings":"","what":"Subsetting commands","title":"Commands","text":"following commands structured behave like dplyr. can placed order piped command chain one relies (part) non-standard evaluation arguments. means don’t quote variable names.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"sc_select","dir":"Articles","previous_headings":"Subsetting commands","what":"sc_select()","title":"Commands","text":"Use sc_select() select variables (columns) want final dataframe. variables used filter data case insensitive. Separate variable names commas. Scorecard API requires variables prepended category. sc_select() uses hash table automatically know include (fact ). command one subsetting commands required pull data.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"sc_filter","dir":"Articles","previous_headings":"Subsetting commands","what":"sc_filter()","title":"Commands","text":"Use sc_filter() filter rows want final dataframe. main job convert idiomatic R code format required Scorecard API. Like sc_select(), sc_filter prepends variable categories automatically variables case insensitive. Like dplyr::filter(), separate filtering expression comma.points note owing idiosyncracies Scorecard API. First, conversions R Scorecard, shown table . notes: R can handle mixture discrete ranged values single variable (c(1,2,5:10)), appear Scorecard API can. either overselect filter downloaded dataframe list every value discretely. Scorecard API appear handle > < symbols. means want select range values certain threshold (e.g., enrollments 10,000 students), may give range 10001 artifically large number. thing reversed values certain threshold. Ranged values inclusive 1:10 convert __range=1..10 include 1 10.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"sc_year","dir":"Articles","previous_headings":"Subsetting commands","what":"sc_year()","title":"Commands","text":"Scorecard variables except root school categories take year option. Simply set data year want. latest data, can either use sc_year(\"latest\") leave sc_year() entirely, default latest data. Two important points: consistent scheme mapping data year. cases, data year year collection. school-year spans (e.g., 2010-2011), data year 2010. cases, Scorecard data defaulted different year. consult Scorecard Documentation sure getting expect. time possible pull single year data time.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"sc_zip","dir":"Articles","previous_headings":"Subsetting commands","what":"sc_zip()","title":"Commands","text":"Use sc_zip() subset sample institutions within certain distance around given zip code. one zip code may given. default distance 25 miles, distance metric (miles kilometers) can changed.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/commands.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data dictionary","title":"Commands","text":"Users can search data elements College Scorecard data dictionary using sc_dict(). can also search using regular expressions limit search one dictionary column. example, search looks varnames starting “st”: can also return data dictionary tibble. storing dictionary object, may useful set print_off = TRUE dictionary results don”t print console: want full data dictionary, simply search \".\":","code":"library(rscorecard) ## simple search for \"state\" in any part of the dictionary sc_dict(\"stabbr\") #>  #> --------------------------------------------------------------------- #> varname: stabbr                                         source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> State postcode #>  #> VALUES: NA #>  #> CAN FILTER? Yes #>  #> --------------------------------------------------------------------- #> Printed information for 1 of out 1 variables. ## variable names starting with \"st\" sc_dict(\"^st\", search_col = \"varname\") #>  #> --------------------------------------------------------------------- #> varname: stabbr                                         source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> State postcode #>  #> VALUES: NA #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: st_fips                                        source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> FIPS code for state #>  #> VALUES:  #>  #> 1 = Alabama #> 2 = Alaska #> 4 = Arizona #> 5 = Arkansas #> 6 = California #> 8 = Colorado #> 9 = Connecticut #> 10 = Delaware #> 11 = District of Columbia #> 12 = Florida #> 13 = Georgia #> 15 = Hawaii #> 16 = Idaho #> 17 = Illinois #> 18 = Indiana #> 19 = Iowa #> 20 = Kansas #> 21 = Kentucky #> 22 = Louisiana #> 23 = Maine #> 24 = Maryland #> 25 = Massachusetts #> 26 = Michigan #> 27 = Minnesota #> 28 = Mississippi #> 29 = Missouri #> 30 = Montana #> 31 = Nebraska #> 32 = Nevada #> 33 = New Hampshire #> 34 = New Jersey #> 35 = New Mexico #> 36 = New York #> 37 = North Carolina #> 38 = North Dakota #> 39 = Ohio #> 40 = Oklahoma #> 41 = Oregon #> 42 = Pennsylvania #> 44 = Rhode Island #> 45 = South Carolina #> 46 = South Dakota #> 47 = Tennessee #> 48 = Texas #> 49 = Utah #> 50 = Vermont #> 51 = Virginia #> 53 = Washington #> 54 = West Virginia #> 55 = Wisconsin #> 56 = Wyoming #> 60 = American Samoa #> 64 = Federated States of Micronesia #> 66 = Guam #> 69 = Northern Mariana Islands #> 70 = Palau #> 72 = Puerto Rico #> 78 = Virgin Islands #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: stufacr                                        source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> Undergraduate student to instructional faculty ratio #>  #> VALUES: NA #>  #> CAN FILTER? No #>  #> --------------------------------------------------------------------- #> Printed information for 3 of out 3 variables. dict_df <- sc_dict(\"stabbr\", print_off = TRUE, return_df = TRUE) dict_df #> # A tibble: 1 × 9 #>   varname value label description    source dev_friendly_name dev_category notes #>   <chr>   <dbl> <chr> <chr>          <chr>  <chr>             <chr>        <chr> #> 1 stabbr     NA NA    State postcode IPEDS  state             school       NA    #> # ℹ 1 more variable: can_filter <dbl> dict_df <- sc_dict(\".\", print_off = TRUE, return_df = TRUE) dict_df #> # A tibble: 3,755 × 9 #>    varname   value label description source dev_friendly_name dev_category notes #>    <chr>     <dbl> <chr> <chr>       <chr>  <chr>             <chr>        <chr> #>  1 unitid       NA NA    Unit ID fo… IPEDS  id                root         NA    #>  2 opeid        NA NA    8-digit OP… IPEDS  ope8_id           root         NA    #>  3 opeid6       NA NA    6-digit OP… IPEDS  ope6_id           root         NA    #>  4 instnm       NA NA    Institutio… IPEDS  name              school       NA    #>  5 city         NA NA    City        IPEDS  city              school       NA    #>  6 stabbr       NA NA    State post… IPEDS  state             school       NA    #>  7 zip          NA NA    ZIP code    IPEDS  zip               school       NA    #>  8 accredag…    NA NA    Accreditor… FSA    accreditor        school       NA    #>  9 insturl      NA NA    URL for in… IPEDS  school_url        school       NA    #> 10 npcurl       NA NA    URL for in… IPEDS  price_calculator… school       NA    #> # ℹ 3,745 more rows #> # ℹ 1 more variable: can_filter <dbl>"},{"path":"https://www.btskinner.io/rscorecard/articles/introduction.html","id":"setting-your-api-key","dir":"Articles","previous_headings":"","what":"1. Setting your API key","title":"Getting started","text":"don’t already one, reqest (free) API key https://api.data.gov/signup. take moments register receive key. ’ve gotten key, can store usig sc_key(). absence key value argument, sc_get() search R environment DATAGOV_API_KEY. complete data request found. sc_key() command store key DATAGOV_API_KEY, persist R session closed. want permanent solution, can add following line (actual key, course) .Renviron file. See appendix information.","code":"# NB: You must use a real key, of course...  sc_key(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\") # NB: You must use a real key, of course...  DATAGOV_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"},{"path":"https://www.btskinner.io/rscorecard/articles/introduction.html","id":"simple-request","dir":"Articles","previous_headings":"","what":"2. Simple request","title":"Getting started","text":"request requires following four commands piped together using |>: sc_init() sc_filter() sc_select() sc_get() command chain must begin sc_init() end sc_get. commands can come order. request belower return tibble name, IPEDS ID, state, degree-seeking undergrad enrollment primarily Baccalaureate colleges Mid East region located rural areas: didn’t include specific year, latest data returned. specifically asked latest data using sc_year(\"latest\"): prior year’s data, change value sc_year():","code":"df <- sc_init() |>      sc_filter(region == 2, ccbasic == c(21,22,23), locale == 41:43) |>      sc_select(unitid, instnm, stabbr, ugds) |>      sc_get() #> Request complete! df #> # A tibble: 4 × 5 #>   unitid instnm                                  stabbr  ugds year   #>    <int> <chr>                                   <chr>  <int> <chr>  #> 1 191676 Houghton University                     NY       745 latest #> 2 194392 Paul Smiths College of Arts and Science NY       668 latest #> 3 196051 SUNY Morrisville                        NY      1776 latest #> 4 197230 Wells College                           NY       349 latest df <- sc_init() |>      sc_filter(region == 2, ccbasic == c(21,22,23), locale == 41:43) |>      sc_select(unitid, instnm, stabbr, ugds) |>     sc_year(\"latest\") |>      sc_get() #> Request complete! df #> # A tibble: 4 × 5 #>   unitid instnm                                  stabbr  ugds year   #>    <int> <chr>                                   <chr>  <int> <chr>  #> 1 191676 Houghton University                     NY       745 latest #> 2 194392 Paul Smiths College of Arts and Science NY       668 latest #> 3 196051 SUNY Morrisville                        NY      1776 latest #> 4 197230 Wells College                           NY       349 latest df <- sc_init() |>      sc_filter(region == 2, ccbasic == c(21,22,23), locale == 41:43) |>      sc_select(unitid, instnm, stabbr, ugds) |>     sc_year(2005) |>      sc_get() #> Request complete! df #> # A tibble: 4 × 5 #>   unitid instnm                                  stabbr  ugds  year #>    <int> <chr>                                   <chr>  <int> <dbl> #> 1 191676 Houghton University                     NY      1368  2005 #> 2 194392 Paul Smiths College of Arts and Science NY       841  2005 #> 3 196051 SUNY Morrisville                        NY      2964  2005 #> 4 197230 Wells College                           NY       407  2005"},{"path":"https://www.btskinner.io/rscorecard/articles/introduction.html","id":"field-of-study-data","dir":"Articles","previous_headings":"2. Simple request","what":"Field of study data","title":"Getting started","text":"fall 2019, College Scorecard released field study-level data elements (4 digit CIP code level). data elements can requested alongside institution-level data: Important note: mapping scheme data across years isn’t consistent across data elements. technical documentation institution-level data: data contain diverse measures institutional performance constructed eye towards type information useful prospective students, well towards measures might promote accountability institutions. measures require different definitions cohorts. Users data aware , particularly constructing analyses relationship different measures. Moreover, reporting inaccuracies data elements used cohort definitions also important. (p. 37) , reporting year (e.g., sc_year(2016)) may , measurement year may directly align. holds true trying align institution-level data field study-level data (see technical documentation field study-level data information). upshot rscorecard return data based API call returns, user take care ensure returned data elements align expectations project needs.","code":"df <- sc_init() |>      sc_filter(region == 2, ccbasic == c(21,22,23), locale == 41:43) |>      sc_select(unitid, instnm, stabbr, ugds, cipcode, cipdesc, debt_mdn) |>     sc_year(\"latest\") |>      sc_get() #> Request complete! ## filter to show only those with non-NA values for median debt df |> dplyr::filter(!is.na(debt_mdn)) #> # A tibble: 179 × 8 #>    unitid instnm              stabbr  ugds cipcode cipdesc        debt_mdn year  #>     <int> <chr>               <chr>  <int> <chr>   <chr>             <int> <chr> #>  1 191676 Houghton University NY       745 0105    Agricultural …    20313 late… #>  2 191676 Houghton University NY       745 0501    Area Studies.     20313 late… #>  3 191676 Houghton University NY       745 0901    Communication…    20313 late… #>  4 191676 Houghton University NY       745 1101    Computer and …    20313 late… #>  5 191676 Houghton University NY       745 1104    Information S…    20313 late… #>  6 191676 Houghton University NY       745 1312    Teacher Educa…    20313 late… #>  7 191676 Houghton University NY       745 1313    Teacher Educa…    20313 late… #>  8 191676 Houghton University NY       745 1313    Teacher Educa…    20313 late… #>  9 191676 Houghton University NY       745 1314    Teaching Engl…    20313 late… #> 10 191676 Houghton University NY       745 1412    Engineering P…    20313 late… #> # ℹ 169 more rows"},{"path":"https://www.btskinner.io/rscorecard/articles/introduction.html","id":"more-information-and-examples","dir":"Articles","previous_headings":"","what":"More information and examples","title":"Getting started","text":"information command, see Commands. examples, see examples.","code":""},{"path":"https://www.btskinner.io/rscorecard/articles/more_examples.html","id":"using-area-within-zip-code","dir":"Articles","previous_headings":"","what":"Using area within zip code","title":"More examples","text":"","code":"## public schools within 50 miles of midtown Nashville, TN df <- sc_init() |>      sc_filter(control == 1) |>      sc_select(unitid, instnm, stabbr) |>      sc_year(2013) |>      sc_zip(37203, 50) |>     sc_get() #> Request complete! df #> # A tibble: 10 × 4 #>    unitid instnm                                               stabbr  year #>     <int> <chr>                                                <chr>  <dbl> #>  1 219602 Austin Peay State University                         TN      2013 #>  2 219888 Columbia State Community College                     TN      2013 #>  3 219994 Tennessee College of Applied Technology-Dickson      TN      2013 #>  4 220279 Tennessee College of Applied Technology-Hartsville   TN      2013 #>  5 220978 Middle Tennessee State University                    TN      2013 #>  6 221102 Tennessee College of Applied Technology-Murfreesboro TN      2013 #>  7 221184 Nashville State Community College                    TN      2013 #>  8 221838 Tennessee State University                           TN      2013 #>  9 222053 Volunteer State Community College                    TN      2013 #> 10 248925 Tennessee College of Applied Technology Nashville    TN      2013"},{"path":"https://www.btskinner.io/rscorecard/articles/more_examples.html","id":"large-pull","dir":"Articles","previous_headings":"","what":"Large pull","title":"More examples","text":"College Scorecard return 100 results time. 100 results, package make multiple pulls append results returning.","code":"## median earnings for students who first enrolled in a public ## college in the New England or Mid-Atlantic regions: 10 years later df <- sc_init() |>      sc_filter(control == 1, region == 1:2, ccbasic == 1:24) |>      sc_select(unitid, instnm, md_earn_wne_p10) |>      sc_year(2009) |>     sc_get() #> Large request will require: 2 additional pulls. #> Request additional chunk 1 #> Request additional chunk 2 #> Request complete! df #> # A tibble: 255 × 4 #>    unitid instnm                               md_earn_wne_p10  year #>     <int> <chr>                                          <int> <dbl> #>  1 128577 Asnuntuck Community College                    30200  2009 #>  2 128771 Central Connecticut State University           46400  2009 #>  3 128780 Charter Oak State College                          0  2009 #>  4 129020 University of Connecticut                      54500  2009 #>  5 129215 Eastern Connecticut State University           43600  2009 #>  6 129367 Capital Community College                      34100  2009 #>  7 129543 Housatonic Community College                   34100  2009 #>  8 129695 Manchester Community College                   34600  2009 #>  9 129729 Naugatuck Valley Community College             32000  2009 #> 10 129756 Middlesex Community College                    34700  2009 #> # ℹ 245 more rows"},{"path":"https://www.btskinner.io/rscorecard/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin Skinner. Author, maintainer.","code":""},{"path":"https://www.btskinner.io/rscorecard/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Skinner B (2024). rscorecard: Method Download Department Education College Scorecard Data. R package version 0.30.0, https://www.btskinner.io/rscorecard/.","code":"@Manual{,   title = {rscorecard: A Method to Download Department of Education College Scorecard Data},   author = {Benjamin Skinner},   year = {2024},   note = {R package version 0.30.0},   url = {https://www.btskinner.io/rscorecard/}, }"},{"path":"https://www.btskinner.io/rscorecard/index.html","id":"rscorecard-","dir":"","previous_headings":"","what":"A Method to Download Department of Education College Scorecard Data","title":"A Method to Download Department of Education College Scorecard Data","text":"package R wrapper U.S. Department Education College Scorecard API. allows users select filter Scorecard variables piped commands la dplyr.","code":""},{"path":"https://www.btskinner.io/rscorecard/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Method to Download Department of Education College Scorecard Data","text":"Install latest released version CRAN Install latest development version Github package relies Scorecard data dictionary, attempt update timely fashion whenever new Scorecard data released. sometimes takes days get package CRAN, may want download developmental version days immediately following data update.","code":"install.packages(\"rscorecard\") devtools::install_github(\"btskinner/rscorecard\")"},{"path":[]},{"path":"https://www.btskinner.io/rscorecard/index.html","id":"set-api-key","dir":"","previous_headings":"Usage","what":"Set API key","title":"A Method to Download Department of Education College Scorecard Data","text":"Get Data.gov API key https://api.data.gov/signup/. Save key R environment start R session using sc_key():","code":"## use your real key in place of the Xs sc_key('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')"},{"path":"https://www.btskinner.io/rscorecard/index.html","id":"request-data","dir":"","previous_headings":"Usage","what":"Request data","title":"A Method to Download Department of Education College Scorecard Data","text":"example calls information package commands, see extended vignette.","code":"library(rscorecard)  df <- sc_init() |>      sc_filter(region == 2, ccbasic == c(21,22,23), locale == 41:43) |>      sc_select(unitid, instnm, stabbr) |>      sc_year(\"latest\") |>      sc_get()  ## Request complete!  df  ## # A tibble: 6 x 4 ##   unitid instnm                                                  stabbr year   ##    <int> <chr>                                                   <chr>  <chr>  ## 1 191676 Houghton College                                        NY     latest ## 2 194392 Paul Smiths College of Arts and Science                 NY     latest ## 3 196051 SUNY Morrisville                                        NY     latest ## 4 197230 Wells College                                           NY     latest ## 5 214625 Pennsylvania State University-Penn State New Kensington PA     latest ## 6 214643 Pennsylvania State University-Penn State Wilkes-Barre   PA     latest"},{"path":"https://www.btskinner.io/rscorecard/index.html","id":"data-dictionary","dir":"","previous_headings":"Usage","what":"Data dictionary","title":"A Method to Download Department of Education College Scorecard Data","text":"look information data elements, use sc_dict() function.","code":"sc_dict(\"control\")  ##  ## --------------------------------------------------------------------- ## varname: control                                        source: IPEDS ## --------------------------------------------------------------------- ## DESCRIPTION: ##  ## Control of institution ##  ## VALUES:  ##  ## 1 = Public ## 2 = Private nonprofit ## 3 = Private for-profit ## 1 = Public ## 2 = Private nonprofit ## 3 = Private for-profit ## 4 = Foreign ##  ## CAN FILTER? Yes ##  ##  ## --------------------------------------------------------------------- ## varname: schtype                                          source: FSA ## --------------------------------------------------------------------- ## DESCRIPTION: ##  ## Control of institution, per PEPS ##  ## VALUES:  ##  ## 1 = Public ## 2 = Private, Nonprofit ## 3 = Proprietary ##  ## CAN FILTER? No ##  ## --------------------------------------------------------------------- ## Printed information for 2 of out 2 variables."},{"path":"https://www.btskinner.io/rscorecard/index.html","id":"further-references","dir":"","previous_headings":"","what":"Further references","title":"A Method to Download Department of Education College Scorecard Data","text":"College Scorecard Website Data documentation Data dictionary [XLS] Policy paper Technical paper","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/rscorecard.html","id":null,"dir":"Reference","previous_headings":"","what":"rscorecard: A Method to Download College Scorecard Data. — rscorecard","title":"rscorecard: A Method to Download College Scorecard Data. — rscorecard","text":"rscorecard package provides series piped functions (la dplyr) facilitate downloading Department Education College Scorecard data.  reality simply method converting idiomatic R code properly formatted URL string queried. package requires API key, can requested https://api.data.gov/signup/.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/rscorecard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rscorecard: A Method to Download College Scorecard Data. — rscorecard","text":"command pipes must start sc_init(), end sc_get(), linked base pipe, |>, magrittr pipe function, %>%. Internal commands, sc_select, sc_filter, sc_year, sc_zip, can come order pipe chain. sc_select required.","code":""},{"path":[]},{"path":"https://www.btskinner.io/rscorecard/reference/rscorecard.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rscorecard: A Method to Download College Scorecard Data. — rscorecard","text":"Maintainer: Benjamin Skinner bskinner@neh.gov (ORCID)","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Search data dictionary. — sc_dict","title":"Search data dictionary. — sc_dict","text":"function used search College Scorecard data dictionary.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search data dictionary. — sc_dict","text":"","code":"sc_dict(   search_string,   search_col = c(\"all\", \"description\", \"varname\", \"dev_friendly_name\", \"dev_category\",     \"label\", \"source\"),   ignore_case = TRUE,   limit = 10,   confirm = FALSE,   print_dev = FALSE,   print_notes = FALSE,   return_df = FALSE,   print_off = FALSE,   can_filter = FALSE,   filter_vars = FALSE )"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search data dictionary. — sc_dict","text":"search_string Character string search. Can use regular expression search. Must escape special characters, . \\ | ( ) [ { ^ $ * + ?, doublebackslash \\\\. search_col Column search. default search columns.  options include: \"varname\", \"dev_friendly_name\", \"dev_category\", \"label\". ignore_case Search case insensitive default. Change FALSE restrict search exact case matches. limit first 10 dictionary items returned default. Increase return values. Set Inf return items matched search' confirm Use confirm status variable name dictionary. Returns TRUE FALSE. print_dev Set TRUE want see developer friendly name category used API call. print_notes Set TRUE want see notes included data dictionary (). return_df Return tibble subset data dictionary. print_off print console; useful want return tibble dictionary values. can_filter Use confirm variable can used filtering variable. Returns TRUE FALSE filter_vars Use print variables can used filter calls. Use argument return_df = TRUE return tibble variables addition console output.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search data dictionary. — sc_dict","text":"","code":"## simple search for 'state' in any part of the dictionary sc_dict('state') #>  #> --------------------------------------------------------------------- #> varname: stabbr                                         source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> State postcode #>  #> VALUES: NA #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: st_fips                                        source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> FIPS code for state #>  #> VALUES:  #>  #> 1 = Alabama #> 2 = Alaska #> 4 = Arizona #> 5 = Arkansas #> 6 = California #> 8 = Colorado #> 9 = Connecticut #> 10 = Delaware #> 11 = District of Columbia #> 12 = Florida #> 13 = Georgia #> 15 = Hawaii #> 16 = Idaho #> 17 = Illinois #> 18 = Indiana #> 19 = Iowa #> 20 = Kansas #> 21 = Kentucky #> 22 = Louisiana #> 23 = Maine #> 24 = Maryland #> 25 = Massachusetts #> 26 = Michigan #> 27 = Minnesota #> 28 = Mississippi #> 29 = Missouri #> 30 = Montana #> 31 = Nebraska #> 32 = Nevada #> 33 = New Hampshire #> 34 = New Jersey #> 35 = New Mexico #> 36 = New York #> 37 = North Carolina #> 38 = North Dakota #> 39 = Ohio #> 40 = Oklahoma #> 41 = Oregon #> 42 = Pennsylvania #> 44 = Rhode Island #> 45 = South Carolina #> 46 = South Dakota #> 47 = Tennessee #> 48 = Texas #> 49 = Utah #> 50 = Vermont #> 51 = Virginia #> 53 = Washington #> 54 = West Virginia #> 55 = Wisconsin #> 56 = Wyoming #> 60 = American Samoa #> 64 = Federated States of Micronesia #> 66 = Guam #> 69 = Northern Mariana Islands #> 70 = Palau #> 72 = Puerto Rico #> 78 = Virgin Islands #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: tuitionfee_in                                  source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> In-state tuition and fees #>  #> VALUES: NA #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: tuitionfee_out                                 source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> Out-of-state tuition and fees #>  #> VALUES: NA #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: earn_in_state_1yr                           source: Treasury #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> Number of graduates working and not enrolled 1 year after completing #>  who were employed within the same state as the institution #>  #> VALUES: NA #>  #> CAN FILTER? No #>  #>  #> --------------------------------------------------------------------- #> varname: earn_in_state_4yr                           source: Treasury #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> Number of graduates working and not enrolled 4 years after completing #>  who were employed within the same state as the institution #>  #> VALUES: NA #>  #> CAN FILTER? No #>  #>  #> --------------------------------------------------------------------- #> varname: earn_in_state_5yr                           source: Treasury #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> Number of graduates working and not enrolled 5 years after completing #>  who were employed within the same state as the institution #>  #> VALUES: NA #>  #> CAN FILTER? No #>  #> --------------------------------------------------------------------- #> Printed information for 7 of out 7 variables. #>   ## variable names starting with 'st' sc_dict('^st', search_col = 'varname') #>  #> --------------------------------------------------------------------- #> varname: stabbr                                         source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> State postcode #>  #> VALUES: NA #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: st_fips                                        source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> FIPS code for state #>  #> VALUES:  #>  #> 1 = Alabama #> 2 = Alaska #> 4 = Arizona #> 5 = Arkansas #> 6 = California #> 8 = Colorado #> 9 = Connecticut #> 10 = Delaware #> 11 = District of Columbia #> 12 = Florida #> 13 = Georgia #> 15 = Hawaii #> 16 = Idaho #> 17 = Illinois #> 18 = Indiana #> 19 = Iowa #> 20 = Kansas #> 21 = Kentucky #> 22 = Louisiana #> 23 = Maine #> 24 = Maryland #> 25 = Massachusetts #> 26 = Michigan #> 27 = Minnesota #> 28 = Mississippi #> 29 = Missouri #> 30 = Montana #> 31 = Nebraska #> 32 = Nevada #> 33 = New Hampshire #> 34 = New Jersey #> 35 = New Mexico #> 36 = New York #> 37 = North Carolina #> 38 = North Dakota #> 39 = Ohio #> 40 = Oklahoma #> 41 = Oregon #> 42 = Pennsylvania #> 44 = Rhode Island #> 45 = South Carolina #> 46 = South Dakota #> 47 = Tennessee #> 48 = Texas #> 49 = Utah #> 50 = Vermont #> 51 = Virginia #> 53 = Washington #> 54 = West Virginia #> 55 = Wisconsin #> 56 = Wyoming #> 60 = American Samoa #> 64 = Federated States of Micronesia #> 66 = Guam #> 69 = Northern Mariana Islands #> 70 = Palau #> 72 = Puerto Rico #> 78 = Virgin Islands #>  #> CAN FILTER? Yes #>  #>  #> --------------------------------------------------------------------- #> varname: stufacr                                        source: IPEDS #> --------------------------------------------------------------------- #> DESCRIPTION: #>  #> Undergraduate student to instructional faculty ratio #>  #> VALUES: NA #>  #> CAN FILTER? No #>  #> --------------------------------------------------------------------- #> Printed information for 3 of out 3 variables. #>   ## return full dictionary (only recommended if not printing and ## storing in object) df <- sc_dict('.', limit = Inf, print_off = TRUE, return_df = TRUE)  ## print list of variables that can be used to filter df <- sc_dict('.', filter_vars = TRUE, return_df = TRUE) #>  #> --------------------------------------------------------------------- #> The following variables can be used in sc_filter(): #> --------------------------------------------------------------------- #>  #>  - aanapii #>  - actcmmid #>  - adm_rate #>  - admcon7 #>  - annhi #>  - c150_4_pooled #>  - ccbasic #>  - cipcode #>  - city #>  - cntover150_3yr #>  - control #>  - creddesc #>  - credlev #>  - curroper #>  - debt_all_stgp_any_mdn #>  - debt_all_stgp_any_mdn10yrpay #>  - debt_all_stgp_eval_mdn #>  - dolprovider #>  - earn_mdn_4yr #>  - earn_mdn_5yr #>  - fedschcd #>  - gt_25k_p6 #>  - gt_threshold_p6_supp #>  - hbcu #>  - hcm2 #>  - highdeg #>  - hsi #>  - instnm #>  - insturl #>  - ipedscount1 #>  - ipedscount2 #>  - locale #>  - locale2 #>  - main #>  - md_earn_wne_p10 #>  - mdcomp_all #>  - mdcomp_pd #>  - mdcost_all #>  - mdcost_pd #>  - mdearn_all #>  - mdearn_pd #>  - menonly #>  - mn_earn_wne_inc1_p6 #>  - nanti #>  - npt41_priv #>  - npt41_pub #>  - npt42_priv #>  - npt42_pub #>  - npt43_priv #>  - npt43_pub #>  - npt44_priv #>  - npt44_pub #>  - npt45_priv #>  - npt45_pub #>  - npt4_priv #>  - npt4_pub #>  - numbranch #>  - opeid #>  - opeid6 #>  - pbi #>  - preddeg #>  - region #>  - relaffil #>  - sat_avg #>  - satmt25 #>  - satmt75 #>  - satmtmid #>  - satvr25 #>  - satvr75 #>  - satvrmid #>  - satwr25 #>  - satwr75 #>  - satwrmid #>  - st_fips #>  - stabbr #>  - tribal #>  - tuitionfee_in #>  - tuitionfee_out #>  - ugds #>  - unitid #>  - womenonly #>  - zip #>"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter scorecard data by variable values. — sc_filter","title":"Filter scorecard data by variable values. — sc_filter","text":"function used filter downloaded scorecard data. converts idiomatic R format required API call.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter scorecard data by variable values. — sc_filter","text":"","code":"sc_filter(sccall, ...)  sc_filter_(sccall, filter_string)"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter scorecard data by variable values. — sc_filter","text":"sccall Current list parameters carried forward prior functions chain (ignore) ... Expressions evaluate filter_string Filter character string vector filters character strings","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_filter.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Filter scorecard data by variable values. — sc_filter","text":"sc_filter_(): Standard evaluation version sc_filter (filter_string must string vector strings using version)","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter scorecard data by variable values. — sc_filter","text":"","code":"if (FALSE) { # \\dontrun{ sc_filter(region == 1) # New England institutions sc_filter(stabbr == c(\"TN\",\"KY\")) # institutions in Tennessee and Kentucky sc_filter(control != 3) # exclude private, for-profit institutions sc_filter(control == c(1,2)) # same as above sc_filter(control == 1:2) # same as above sc_filter(stabbr == \"TN\", control == 1, locale == 41:43) # TN rural publics } # } if (FALSE) { # \\dontrun{ sc_filter_(\"region == 1\") sc_filter_(\"control != 3\")  ## With internal strings, you must either use both double and single quotes ## or escape internal quotes sc_filter_(\"stabbr == c('TN','KY')\") sc_filter_('stabbr == c(\\'TN\\',\\'KY\\')')  ## stored in object filters <- c(\"control == 1\", \"locale == 41:43\") sc_filter_(filters) } # }"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get scorecard data. — sc_get","title":"Get scorecard data. — sc_get","text":"function gets College Scorecard data compiling converting previous piped output single URL string used get data.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get scorecard data. — sc_get","text":"","code":"sc_get(   sccall,   api_key,   debug = FALSE,   print_key_debug = FALSE,   return_json = FALSE )"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get scorecard data. — sc_get","text":"sccall Current list parameters carried forward prior functions chain (ignore) api_key Personal API key requested https://api.data.gov/signup stored string. first set key using sc_key, may omit parameter. key set take precedence set environment (DATAGOV_API_KEY). debug Set true print return API call (URL string) rather make actual request. used debugging calls. print_key_debug used debug == TRUE. Default masks api_key value. Set TRUE print full API call string api_key unmasked. return_json Return data JSON format rather tibble.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_get.html","id":"obtain-a-key","dir":"Reference","previous_headings":"","what":"Obtain a key","title":"Get scorecard data. — sc_get","text":"obtain API key, visit https://api.data.gov/signup","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get scorecard data. — sc_get","text":"","code":"if (FALSE) { # \\dontrun{ sc_get(\"<API KEY IN STRING>\") key <- \"<API KEY IN STRING>\" sc_get(key) } # }"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize chained request. — sc_init","title":"Initialize chained request. — sc_init","text":"function initializes data request. always first series piped functions.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize chained request. — sc_init","text":"","code":"sc_init(dfvars = FALSE)"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize chained request. — sc_init","text":"dfvars Set TRUE rather use developer-friendly variable names used actual API call.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize chained request. — sc_init","text":"","code":"if (FALSE) { # \\dontrun{ sc_init() sc_init(dfvars = TRUE) } # }"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Data.gov API key in system environment. — sc_key","title":"Store Data.gov API key in system environment. — sc_key","text":"function stores data.gov API key system environment load start session. set key using sc_key, may omit api_key parameter sc_get function.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Data.gov API key in system environment. — sc_key","text":"","code":"sc_key(api_key)"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Data.gov API key in system environment. — sc_key","text":"api_key Personal API key requested https://api.data.gov/signup stored string.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_key.html","id":"obtain-a-key","dir":"Reference","previous_headings":"","what":"Obtain a key","title":"Store Data.gov API key in system environment. — sc_key","text":"obtain API key, visit https://api.data.gov/signup.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Data.gov API key in system environment. — sc_key","text":"","code":"if (FALSE) { # \\dontrun{ sc_key('<API KEY IN STRING>') } # }"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select scorecard data variables. — sc_select","title":"Select scorecard data variables. — sc_select","text":"function used select variables returned final dataset.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select scorecard data variables. — sc_select","text":"","code":"sc_select(sccall, ...)  sc_select_(sccall, vars)"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select scorecard data variables. — sc_select","text":"sccall Current list parameters carried forward prior functions chain (ignore) ... Desired variable names separated commas (case sensitive) vars Character string variable name vector character string variable names","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_select.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Select scorecard data variables. — sc_select","text":"sc_select_(): Standard evaluation version sc_select (vars must string vector strings using version)","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select scorecard data variables. — sc_select","text":"","code":"if (FALSE) { # \\dontrun{ sc_select(UNITID) sc_select(UNITID, INSTNM) sc_select(unitid, instnm) } # } if (FALSE) { # \\dontrun{ sc_select_(\"UNITID\") sc_select_(c(\"UNITID\", \"INSTNM\")) sc_select_(c(\"unitid\", \"instnm\"))  ## stored in object vars_to_pull <- c(\"unitid\",\"instnm\") sc_select(vars_to_pull) } # }"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Select scorecard data year. — sc_year","title":"Select scorecard data year. — sc_year","text":"function used select year data.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select scorecard data year. — sc_year","text":"","code":"sc_year(sccall, year)"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select scorecard data year. — sc_year","text":"sccall Current list parameters carried forward prior functions chain (ignore) year Four-digit year string latest latest data.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_year.html","id":"important-notes","dir":"Reference","previous_headings":"","what":"Important notes","title":"Select scorecard data year. — sc_year","text":"variables year option. time, one year time allowed. year selected necessarily year data produced. may year data collected. data collected split years (fall spring), likely year represents fall data (e.g., 2011 2011/2012 data). sure check College Scorecard data documentation report choosing year.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select scorecard data year. — sc_year","text":"","code":"if (FALSE) { # \\dontrun{ sc_year() # latest sc_year(\"latest\") sc_year(2012) } # }"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset results to those within specified area around zip code. — sc_zip","title":"Subset results to those within specified area around zip code. — sc_zip","text":"Subset results within specified area around zip code.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset results to those within specified area around zip code. — sc_zip","text":"","code":"sc_zip(sccall, zip, distance = 25, km = FALSE)"},{"path":"https://www.btskinner.io/rscorecard/reference/sc_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset results to those within specified area around zip code. — sc_zip","text":"sccall Current list parameters carried forward prior functions chain (ignore) zip 5-digit zipcode distance integer distance miles kilometers km boolean value set TRUE distance kilometers (default FALSE miles)","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_zip.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Subset results to those within specified area around zip code. — sc_zip","text":"Zip codes leading zeros (Northeast) can     called either using string (\"02111\") numeric     (02111). R drop leading zero second     version, sc_zip() add back     call. shortened version without leading zero may also     used (2111 \"2111\" become \"02111\"),     recommended clarity.","code":""},{"path":"https://www.btskinner.io/rscorecard/reference/sc_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset results to those within specified area around zip code. — sc_zip","text":"","code":"if (FALSE) { # \\dontrun{ sc_zip(37203) sc_zip(37203, 50) sc_zip(37203, 50, km = TRUE) sc_zip(\"02111\")              # 1. Using string sc_zip(02111)                # 2. Dropped leading zero will be added sc_zip(2111)                 # 3. Will become \"02111\" (not recommended) } # }"},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0300","dir":"Changelog","previous_headings":"","what":"rscorecard v0.30.0","title":"rscorecard v0.30.0","text":"update dictionary 10 October 2024 release date","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0290","dir":"Changelog","previous_headings":"","what":"rscorecard v0.29.0","title":"rscorecard v0.29.0","text":"CRAN release: 2024-08-30 update dictionary 13 June 2024 release date","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0281","dir":"Changelog","previous_headings":"","what":"rscorecard v0.28.1","title":"rscorecard v0.28.1","text":"CRAN release: 2024-05-28 fix way columns types changed takes account column names since subsequent data pulls columns","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0280","dir":"Changelog","previous_headings":"","what":"rscorecard v0.28.0","title":"rscorecard v0.28.0","text":"update fix error #17 converted single quotes double throughout converted old magrittr pipe new base R pipe now require least R version 4.1 (current version 4.3.3)","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0270","dir":"Changelog","previous_headings":"","what":"rscorecard v0.27.0","title":"rscorecard v0.27.0","text":"update dictionary 10 October 2023 release date","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0260","dir":"Changelog","previous_headings":"","what":"rscorecard v0.26.0","title":"rscorecard v0.26.0","text":"CRAN release: 2023-04-28 update dictionary 25 April 2023 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0250","dir":"Changelog","previous_headings":"","what":"rscorecard v0.25.0","title":"rscorecard v0.25.0","text":"update dictionary 14 September 2022 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0240","dir":"Changelog","previous_headings":"","what":"rscorecard v0.24.0","title":"rscorecard v0.24.0","text":"CRAN release: 2022-10-20 update dictionary 12 September 2022 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0230","dir":"Changelog","previous_headings":"","what":"rscorecard v0.23.0","title":"rscorecard v0.23.0","text":"CRAN release: 2022-07-05 update dictionary 2 May 2022 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0220","dir":"Changelog","previous_headings":"","what":"rscorecard v0.22.0","title":"rscorecard v0.22.0","text":"CRAN release: 2022-03-23 update dictionary 14 March 2022 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0210","dir":"Changelog","previous_headings":"","what":"rscorecard v0.21.0","title":"rscorecard v0.21.0","text":"CRAN release: 2022-02-08 update dictionary 7 February 2022 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0200","dir":"Changelog","previous_headings":"","what":"rscorecard v0.20.0","title":"rscorecard v0.20.0","text":"CRAN release: 2021-07-28 update dictionary 20 July 2021 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0191","dir":"Changelog","previous_headings":"","what":"rscorecard v0.19.1","title":"rscorecard v0.19.1","text":"CRAN release: 2021-07-20","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"bug-fix-0-19-1","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"rscorecard v0.19.1","text":"corrected changes magrittr 2.0 function evaluation order (last first) meant error messages weren’t correctly displaying","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"updates-0-19-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"rscorecard v0.19.1","text":"new error messages missing sc_select() function updated error messages additional tests new base R pipe |>","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0190","dir":"Changelog","previous_headings":"","what":"rscorecard v0.19.0","title":"rscorecard v0.19.0","text":"update allow filtering variables allowed due API changes 4 April 2021","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0180","dir":"Changelog","previous_headings":"","what":"rscorecard v0.18.0","title":"rscorecard v0.18.0","text":"CRAN release: 2021-01-13 update dictionary 12 January 2021 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0170","dir":"Changelog","previous_headings":"","what":"rscorecard v0.17.0","title":"rscorecard v0.17.0","text":"CRAN release: 2020-12-05 update dictionary 2 December 2020 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0160","dir":"Changelog","previous_headings":"","what":"rscorecard v0.16.0","title":"rscorecard v0.16.0","text":"CRAN release: 2020-06-03 update dictionary 1 June 2020 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0150","dir":"Changelog","previous_headings":"","what":"rscorecard v0.15.0","title":"rscorecard v0.15.0","text":"CRAN release: 2020-04-09 update dictionary 30 March 2020 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0140","dir":"Changelog","previous_headings":"","what":"rscorecard v0.14.0","title":"rscorecard v0.14.0","text":"CRAN release: 2020-01-08 update dictionary 12 December 2019 release data users can now request field study-level data elements updates sc_dict() command: can now return tibble dictionary information using return_df argument can turn printing print_off argument now returns data element source return developer-friendly names default; turn using print_dev == TRUE argument can return notes data dictionary (exist) setting print_notes == TRUE users can now request JSON version returned data using return_json == TRUE sc_get() returned data frame now puts variables order requested sc_select() new tests","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0130","dir":"Changelog","previous_headings":"","what":"rscorecard v0.13.0","title":"rscorecard v0.13.0","text":"CRAN release: 2019-10-01 update dictionary 30 September 2019 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0120","dir":"Changelog","previous_headings":"","what":"rscorecard v0.12.0","title":"rscorecard v0.12.0","text":"CRAN release: 2019-05-21 update dictionary 21 May 2019 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0111","dir":"Changelog","previous_headings":"","what":"rscorecard v0.11.1","title":"rscorecard v0.11.1","text":"CRAN release: 2018-11-05","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"bug-fix-0-11-1","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"rscorecard v0.11.1","text":"correct error regular expression converted dev-friendly names back variable names sc_get (h/t @nguyentr17) moved regular expression conversions utility_functions::dev_to_var","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"updates-0-11-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"rscorecard v0.11.1","text":"added tests conversion","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0110","dir":"Changelog","previous_headings":"","what":"rscorecard v0.11.0","title":"rscorecard v0.11.0","text":"CRAN release: 2018-10-30 update dictionary 30 October 2018 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v0100","dir":"Changelog","previous_headings":"","what":"rscorecard v0.10.0","title":"rscorecard v0.10.0","text":"CRAN release: 2018-10-01 update dictionary 28 September 2018 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v090","dir":"Changelog","previous_headings":"","what":"rscorecard v0.9.0","title":"rscorecard v0.9.0","text":"CRAN release: 2018-09-10","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"potentially-breaking-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Potentially breaking changes","title":"rscorecard v0.9.0","text":"default value sc_year() now 'latest' rather 2013. continued data updates, makes sense keeping old year. Existing scripts relied default data 2013 need updated. also note year column character column latest value recent data choosen. College Scorecard doesn’t clearly note data latest, left string. building panel dataset across multiple years, best use numeric year values years resulting tibbles can bound together cleanly.","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"other-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"rscorecard v0.9.0","text":"add support using tidyselect helper functions selecting variables sc_select(): starts_with(), ends_with(), contains(), matches() now available. update dictionary 6 September 2018 release data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v080","dir":"Changelog","previous_headings":"","what":"rscorecard v0.8.0","title":"rscorecard v0.8.0","text":"CRAN release: 2018-08-26","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"rscorecard v0.8.0","text":"improved error handling submitting bad request added sc_select_() sc_filter_(), allow users select filter variables using strings stored environment variable","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v071","dir":"Changelog","previous_headings":"","what":"rscorecard v0.7.1","title":"rscorecard v0.7.1","text":"CRAN release: 2018-03-29","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"changes-0-7-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"rscorecard v0.7.1","text":"update dictionary March 2018 release scorecard data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v070","dir":"Changelog","previous_headings":"","what":"rscorecard v0.7.0","title":"rscorecard v0.7.0","text":"CRAN release: 2018-03-08","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"rscorecard v0.7.0","text":"update dictionary 19 December 2017 release scorecard data","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v060","dir":"Changelog","previous_headings":"","what":"rscorecard v0.6.0","title":"rscorecard v0.6.0","text":"CRAN release: 2017-12-12","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"rscorecard v0.6.0","text":"allow sc_zip() take zip codes start zero (h/t @nateaff), either string value returning leading zeros numeric values R drops","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v050","dir":"Changelog","previous_headings":"","what":"rscorecard v0.5.0","title":"rscorecard v0.5.0","text":"CRAN release: 2017-10-20","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"rscorecard v0.5.0","text":"changed way API call made (now using httr make call rather jsonlite directly) order improve parsing bad lines added debug option sc_get() API URL string returned debugging call removed old namespace import/exports longer used","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v040","dir":"Changelog","previous_headings":"","what":"rscorecard v0.4.0","title":"rscorecard v0.4.0","text":"CRAN release: 2017-09-28 update dictionary 28 September 2017 release scorecard data update link introduction vignette change contact information read data dictionary sheet name instead sheet number making sysdata.rda ./data-raw/make_dict_hash.R correct sc_get() use floor() instead ceiling() doesn’t make unnecessary API request/pull (h/t @jjchern)","code":""},{"path":[]},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"bug-fix-0-3-3","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"rscorecard v0.3.3","text":"allow sc_filter() use subset object vectors","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v032","dir":"Changelog","previous_headings":"","what":"rscorecard v0.3.2","title":"rscorecard v0.3.2","text":"allow sc_filter() use vectors stored objects allow sc_filter() use %% operator","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v031","dir":"Changelog","previous_headings":"","what":"rscorecard v0.3.1","title":"rscorecard v0.3.1","text":"CRAN release: 2017-01-14 update dictionary 13 January 2017 release scorecard data update sc_dict() search columns default update internal hash lookup environment less generic name","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v025","dir":"Changelog","previous_headings":"","what":"rscorecard v0.2.5","title":"rscorecard v0.2.5","text":"CRAN release: 2016-05-18 fixed sc_dict() bug wouldn’t allow search developer friendly names","code":""},{"path":"https://www.btskinner.io/rscorecard/news/index.html","id":"rscorecard-v024","dir":"Changelog","previous_headings":"","what":"rscorecard v0.2.4","title":"rscorecard v0.2.4","text":"CRAN release: 2016-03-26 initial release","code":""}]
